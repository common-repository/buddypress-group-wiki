<?php

include(WP_PLUGIN_DIR.'/buddypress-group-wiki/bp-groupwiki.inc.php');

class Wiki extends BP_Group_Extension {	

	function wiki() {
		
		global $bp;
		
		$this->name = 'Wiki';
		$this->slug = 'wiki'; 
		
		$this->create_step_position = 16;
		$this->nav_item_position = 41;
		
		$this->visibility = 'public';
		
		// Only enable the group nav item if the groupwiki has been activated
		if (groups_get_groupmeta($bp->groups->current_group->id, 'wiki_enabled') > 0) {
			$this->enable_nav_item = true;
		} else {
			$this->enable_nav_item = false;
		}
    
		// Load the wiki css and js files
		add_action ('wp_print_styles', array(&$this, 'add_wiki_stylesheet'));
		add_action ('wp_print_scripts', array(&$this, 'add_wiki_script'));
		add_action ('wp_print_scripts', array(&$this, 'add_wiki_tinymce'));

		// Make private groups also display the wiki nav item, even if people aren't members
		add_action('wp', array( &$this , 'bpgw_setup_wikinav' ), 2);
		add_action('admin_menu', array( &$this , 'bpgw_setup_wikinav' ), 2);

	}
	
	/**
	 * This function is added to the WP wp and admin_menu actions to enable the group wiki nav 
	 * item even when viewing private groups as non-members
	 */ 
	public function bpgw_setup_wikinav() {
		global $bp, $current_user;

		if ( $bp->current_component == $bp->groups->slug && $bp->is_single_item ) {
			if ( $bp->groups->current_group->status == 'private' && groups_get_groupmeta( $bp->groups->current_group->id , 'wiki_enabled' ) > 0 )  {
				if ( groups_get_groupmeta( $bp->groups->current_group->id , 'wiki_enabled' ) > 0 ) {
					bp_core_new_subnav_item( array( 'name' => ( !$this->nav_item_name ) ? $this->name : $this->nav_item_name, 'slug' => $this->slug, 'parent_slug' => BP_GROUPS_SLUG, 'parent_url' => bp_get_group_permalink( $bp->groups->current_group ) . '/', 'position' => $this->nav_item_position, 'item_css_id' => 'nav-' . $this->slug, 'screen_function' => array( &$this, '_display_hook' ), 'user_has_access' => $this->enable_nav_item ) );
				}
			}
		}
	}
		
	/**
	 * This function is added to the WP wp_print_styles action and ensures the wiki stlyesheet is loaded
	 */ 
	public function add_wiki_stylesheet() {
        $wiki_style_url = WP_PLUGIN_URL . '/buddypress-group-wiki/css/style.css';
        $wiki_style_file = WP_PLUGIN_DIR . '/buddypress-group-wiki/css/style.css';
        if (file_exists($wiki_style_file)) {
            wp_register_style('groupwiki-style', $wiki_style_url);
            wp_enqueue_style('groupwiki-style');
        }
    }
	
	/**
	 * This function is added to the WP wp_print_styles action and ensures the wiki javascript is loaded
	 */ 
	public function add_wiki_script() {
        $wiki_script_url = WP_PLUGIN_URL . '/buddypress-group-wiki/js/script.js';
        $wiki_script_file = WP_PLUGIN_DIR . '/buddypress-group-wiki/js/script.js';
        if (file_exists($wiki_script_file)) {
            wp_register_script('groupwiki-script', $wiki_script_url);
            wp_enqueue_script('groupwiki-script');
        }
    }
	
	/**
	 * This function is added to the WP wp_print_styles action and ensures the wiki javascript for tinymce is loaded
	 */ 
	public function add_wiki_tinymce() {
        $wiki_script_url = WP_PLUGIN_URL . '/buddypress-group-wiki/js/tiny_mce/tiny_mce.js';
        $wiki_script_file = WP_PLUGIN_DIR . '/buddypress-group-wiki/js/tiny_mce/tiny_mce.js';
        if (file_exists($wiki_script_file)) {
            wp_register_script('groupwiki-tinymce', $wiki_script_url);
            wp_enqueue_script('groupwiki-tinymce');
        }
    }	

	/**
	 * This function outputs the wiki controls in the group creation screen
	 */ 
	function create_screen() {
		if ( !bp_is_group_creation_step( $this->slug ) )
			return false;
		require('content-pages/wiki-create.php');
		wp_nonce_field( 'groups_create_save_' . $this->slug );
	}

	/**
	 * This function saves the post data generated by create_screen() (creates a wiki blog, the pages, etc)
	 */ 
	function create_screen_save() {
		global $bp, $wpdb, $domain, $current_site;
		
		check_admin_referer('groups_create_save_'.$this->slug);
		$wiki_enable_checkbox_ticked = $_POST['groupwiki-enable-wiki'];
		if ($_POST['groupwiki-member-page-create']) {
			$wiki_member_page_create_allowed = 1;
		} else {
			$wiki_member_page_create_allowed = 0;
		}
		if (!groups_get_groupmeta($bp->groups->new_group_id, 'wiki_blog_id') && $wiki_enable_checkbox_ticked) {
			$group_wiki_data_array = array_unique($_POST[ "wikiPageTitle" ]);
			$wiki_view_access = $_POST['wiki-privacy'];
			$wiki_edit_access = $_POST['wiki-edit-rights'];
			bpgw_create_wiki($group_wiki_data_array, $wiki_view_access, $wiki_edit_access, $wiki_member_page_create_allowed);
		}
	}

	/**
	 * This function outputs the wiki controls in the group admin screen
	 */ 
	function edit_screen() {
		global $bp;
		
		if (!bp_is_group_admin_screen( $this->slug )) {
			return false; 
		}
		if (!(groups_is_user_admin($bp->loggedin_user->id, $bp->groups->current_group->id) || is_site_admin())) {
			return false;
		}	
		require('content-pages/wiki-admin.php');
		wp_nonce_field( 'groups_edit_save_' . $this->slug );
	}

	function edit_screen_save() {
		global $bp, $wpdb, $domain, $current_site;

		if (!isset($_POST['save'])) {
			return false;
		}
		check_admin_referer('groups_edit_save_' . $this->slug);
		$wiki_enable_checkbox_ticked = $_POST['groupwiki-enable-wiki'];
		if ($_POST['groupwiki-member-page-create']) {
			$wiki_member_page_create_allowed = 1;
		} else {
			$wiki_member_page_create_allowed = 0;
		}
		if (groups_get_groupmeta($bp->groups->current_group->id, 'wiki_blog_id')) {
			$bpgw_blog_id = groups_get_groupmeta($bp->groups->current_group->id, 'wiki_blog_id');
			switch_to_blog($bpgw_blog_id);
			if (!isset($_POST['groupwiki-enable-wiki'])) {
				groups_update_groupmeta($bp->groups->current_group->id, 'wiki_enabled', 0);
			} else {
				groups_update_groupmeta($bp->groups->current_group->id, 'wiki_enabled', $bpgw_blog_id);
			}
			groups_update_groupmeta( $bp->groups->current_group->id , 'wiki_member_page_create' , $wiki_member_page_create_allowed );
			$page_options_array = $_POST['wikiPage'];
			foreach ($page_options_array as $page_options) {
				$post = array();
				$post['ID'] = $page_options['id'];
				if (is_numeric($page_options['order'])) {
					$post['menu_order'] = $page_options['order'];
				}
				if ($page_options['title'] != '') {
					$post['post_title'] = esc_attr($page_options['title']);
				}
				if (!isset($page_options['comments'])) { 
					$post['comment_status'] = 'closed';
				} else {
					$post['comment_status'] = 'open';
				}
				$old_post = get_post( $post['ID'] );
				if ($old_post->post_title != $post['post_title']) {
					$title_change = true;
				} else {
					$title_change = false;
				}
				if ($old_post->comment_status != $post['comment_status']) {
					$comment_change = true;
				} else {
					$comment_change = false;
				}
				if (WP_POST_REVISIONS == 1 && !$title_change && !$comment_change) {
					remove_action('pre_post_update', 'wp_save_post_revision');
					wp_update_post($post);
				} else { 
					wp_update_post($post);
				}
				// Set the post meta to control view/edit access
				update_post_meta($post['ID'], 'wiki_view_access', $page_options['privacy']);
				update_post_meta($post['ID'], 'wiki_edit_access', $page_options['edit']);
				update_post_meta($post['ID'], 'wiki_page_enabled', $page_options['enabled']);
			}
			//Create post object
			$wiki_post = array(
				'post_content' => '', 		// The full text of the post.
				'post_excerpt' => '', 		// For all your post excerpt needs.
				'post_name' => '', 			// The URI/URL/slug of the post
				'post_status' => 'publish', // Set the status of the new post
				'post_title' => '', 		// The title of the post
				'post_type' => 'page', 		// Wiki only uses pages, not posts
				'menu_order' => '0' 		// Order page will appear in nav menu - lower number appears first
			); 
			// Create new pages if this section of form was filled in			
			if (isset($_POST['wikiPageTitle'])) {
				// Set the default wiki view and edit rights
				$wiki_view_access = 'public';
				$wiki_edit_access = 'all-members';			
				$group_wiki_data_array = $_POST['wikiPageTitle'];
				$wiki_page_count = count($page_options_array) + 1; // count number of already created pages
				foreach ($group_wiki_data_array as $group_wiki_data) {
					// Modify page data for this post
					$wiki_post['post_name'] = bpgw_slugified_title($group_wiki_data);
					if ($wiki_post['post_name'] == '') {
						continue; // Skip the page creation if the user didn't fill in a title
					}
					$wiki_post['post_title'] = esc_attr($group_wiki_data);
					$wiki_post['menu_order'] = $wiki_page_count;
					$wiki_page_count++;
					// insert the wiki page
					$wiki_post_id = wp_insert_post($wiki_post);
					// Set the meta data for the page to control view/edit access
					add_post_meta($wiki_post_id, 'wiki_view_access', $wiki_view_access, 1);
					add_post_meta($wiki_post_id, 'wiki_edit_access', $wiki_edit_access, 1);
					add_post_meta($wiki_post_id, 'wiki_page_enabled', 1, 1);
				}
				groups_update_groupmeta( $bp->groups->current_group->id, 'last_activity', time() );
			}		
			$wpdb->query($wpdb->prepare("DELETE FROM {$bp->blogs->table_name} WHERE user_id = %d AND blog_id = %d", 1, $bpgw_blog_id));	
			restore_current_blog();
			$success = true;
		} elseif ($wiki_enable_checkbox_ticked) {				
			if (!groups_get_groupmeta($bp->groups->current_group->id, 'wiki_blog_id') && $wiki_enable_checkbox_ticked) {
				// process the page titles
				$group_wiki_data_array = array_unique($_POST[ "wikiPageTitle" ]);
				// process the privacy choices ready to be inserted as post meta data
				$wiki_view_access = $_POST['wiki-privacy'];
				// process the privacy choices ready to be inserted as post meta data
				$wiki_edit_access = $_POST['wiki-edit-rights'];
				$success = bpgw_create_wiki( $group_wiki_data_array , $wiki_view_access , $wiki_edit_access );
			}
		} else {
			$success = true;
			$no_changes = true;
		}
		/* To post an error/success/no change message to the screen, use the following */
		if (!$success && !$no_changes) {
			bp_core_add_message(__('There was an error saving, please try again', 'buddypress'), 'error');
		} elseif ($no_changes) {
			bp_core_add_message(__('No changes were made to wiki settings', 'buddypress'), 'error');
		} else {
			bp_core_add_message(__('Settings saved successfully', 'buddypress'));
		}	
		bp_core_redirect(bp_get_group_permalink($bp->groups->current_group) . '/admin/' . $this->slug);
	}

	/**
	 * This function outputs the wiki home and wiki pages in the group home screen
	 */ 
	function display() {
		global $bp;
		
		require('content-pages/wiki-index.php');
	}

	/**
	 * This is null but is required by BP to be overriden for the plugin to function
	 */ 
	function widget_display() { 
		// blank
	}
}

// Register the group wiki plugin with BP
bp_register_group_extension('Wiki');
?>